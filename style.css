
Menu
28 MARCH 2019
/
#WEB DEVELOPMENT
How to build a simple tab bar navigation component
Florin Pop
Florin Pop
JavaScript enthusiast ?, Front-end developer ? & Blogger ?




How to build a simple tab bar navigation component
The theme for week #3 of my Weekly Coding Challenge is navigation! So let’s learn a bit more about it.

Navigation
A navigation component is crucial on a website because you want your users be able to easily navigate through your pages. You can find a navigation component even on single page websites that’ll allow you to jump to a certain section on the page. So as a developer, it is very useful to know how to build this kind of component.

In this article, I decided to build a Tab Bar Navigation, but you can build any kind of navigation you want.

I was inspired by this design made by Aurelien Salomon. Here is what the final result of what we’re going to build will look like:


The HTML
The HTML structure is going to be simple. We’ll have a .tab-nav-container and four .tabs within it:

<div class="tab-nav-container">
    <div class="tab active purple">
        <i class="fas fa-home"></i>
        <p>House</p>
    </div>
    <div class="tab pink">
        <i class="far fa-heart"></i>
        <p>Likes</p>
    </div>
    <div class="tab yellow">
        <i class="fas fa-search"></i>
        <p>Search</p>
    </div>
    <div class="tab teal">
        <i class="far fa-user"></i>
        <p>Profile</p>
    </div>
</div>
As you can see, each .tab has an icon (from FontAwesome), the corresponding text, and some extra classes that will be used to give each tab specific background-color and color properties. Also the .active class, which will be used to style the active tab. Pretty basic, right? ?

The CSS
First, let’s style the .tab-nav-container:

Note: we have a fixed width on the container as we don't want it to change its size when we change the active .tab since each tab might have a text that's either longer or shorter in size (e.g. Home (4 letters) vs Profile (6 letters)).

We are using flexbox to distribute the .tabs evenly inside the container. Other than that I believe that the CSS is pretty self-explanatory.

Next…the .tab's styling:

.tab {
    background-color: #ffffff;
    border-radius: 50px;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 0 20px;
    margin: 0 10px;
    transition: background 0.4s linear;
}

.tab i {
    font-size: 1.2em;
}

.tab p {
    font-weight: bold;
    overflow: hidden;
    max-width: 0;
}

.tab.active p {
    margin-left: 10px;
    max-width: 200px;
    transition: max-width 0.4s linear;
}

.tab.active.purple {
    background-color: rgba(91, 55, 183, 0.2);
    color: rgba(91, 55, 183, 1);
}

.tab.active.pink {
    background-color: rgba(201, 55, 157, 0.2);
    color: rgba(201, 55, 157, 1);
}

.tab.active.yellow {
    background-color: rgba(230, 169, 25, 0.2);
    color: rgba(230, 169, 25, 1);
}

.tab.active.teal {
    background-color: rgba(28, 150, 162, 0.2);
    color: rgba(28, 150, 162, 1);
}


Menu
28 MARCH 2019
/
#WEB DEVELOPMENT
How to build a simple tab bar navigation component
Florin Pop
Florin Pop
JavaScript enthusiast ?, Front-end developer ? & Blogger ?




How to build a simple tab bar navigation component
The theme for week #3 of my Weekly Coding Challenge is navigation! So let’s learn a bit more about it.

Navigation
A navigation component is crucial on a website because you want your users be able to easily navigate through your pages. You can find a navigation component even on single page websites that’ll allow you to jump to a certain section on the page. So as a developer, it is very useful to know how to build this kind of component.

In this article, I decided to build a Tab Bar Navigation, but you can build any kind of navigation you want.

I was inspired by this design made by Aurelien Salomon. Here is what the final result of what we’re going to build will look like:


The HTML
The HTML structure is going to be simple. We’ll have a .tab-nav-container and four .tabs within it:

<div class="tab-nav-container">
    <div class="tab active purple">
        <i class="fas fa-home"></i>
        <p>House</p>
    </div>
    <div class="tab pink">
        <i class="far fa-heart"></i>
        <p>Likes</p>
    </div>
    <div class="tab yellow">
        <i class="fas fa-search"></i>
        <p>Search</p>
    </div>
    <div class="tab teal">
        <i class="far fa-user"></i>
        <p>Profile</p>
    </div>
</div>
As you can see, each .tab has an icon (from FontAwesome), the corresponding text, and some extra classes that will be used to give each tab specific background-color and color properties. Also the .active class, which will be used to style the active tab. Pretty basic, right? ?

The CSS
First, let’s style the .tab-nav-container:

Note: we have a fixed width on the container as we don't want it to change its size when we change the active .tab since each tab might have a text that's either longer or shorter in size (e.g. Home (4 letters) vs Profile (6 letters)).

We are using flexbox to distribute the .tabs evenly inside the container. Other than that I believe that the CSS is pretty self-explanatory.

Next…the .tab's styling:

.tab {
    background-color: #ffffff;
    border-radius: 50px;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 0 20px;
    margin: 0 10px;
    transition: background 0.4s linear;
}

.tab i {
    font-size: 1.2em;
}

.tab p {
    font-weight: bold;
    overflow: hidden;
    max-width: 0;
}

.tab.active p {
    margin-left: 10px;
    max-width: 200px;
    transition: max-width 0.4s linear;
}

.tab.active.purple {
    background-color: rgba(91, 55, 183, 0.2);
    color: rgba(91, 55, 183, 1);
}

.tab.active.pink {
    background-color: rgba(201, 55, 157, 0.2);
    color: rgba(201, 55, 157, 1);
}

.tab.active.yellow {
    background-color: rgba(230, 169, 25, 0.2);
    color: rgba(230, 169, 25, 1);
}

.tab.active.teal {
    background-color: rgba(28, 150, 162, 0.2);
    color: rgba(28, 150, 162, 1);
}
Few things to note here:

In order to have a smooth transition when we change the .active tab, we are setting a transition: background property to the .tab class.
By default the p tag inside the .tab has a max-width of 0 and its overflow property set to hidden. This is because we only want to show the text only when the .tab is active.
We are using the custom color classes (.purple, .pink, etc) to have different colors in the tabs.
Let’s make sure it looks good on mobile too:

@media (max-width: 450px) {
    .tab-nav-container {
        padding: 20px;
        width: 350px;
    }

    .tab {
        padding: 0 10px;
        margin: 0;
    }

    .tab i {
        font-size: 1em;
    }
}